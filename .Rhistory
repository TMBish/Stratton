revenue
rm(revenue)
rm(cost)
film = "thsiicmkx"
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page)<=1) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
revenue
cost
mojo_page
length(mojo_page)<=1
length(mojo_page)
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page)==2) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
cost
revenue
mojo_page
length(mojo_page)==2
stop()
install.packages('addinslist')
addinslist:::addinslistAddin()
films
films =get_box_office(films)
head(films)
chart_cluster = function(df, axes = c("rating", "intl_revenue")) {
require(ggplot2)
require(hrbrthemes)
require(gcookbook)
x_lab = switch(axes[2], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
y_lab = switch(axes[1], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
ggplot(data = df, aes_string(y = axes[1], x = axes[2])) +
geom_point(size = 2.5) +
scale_y_continuous(limits = c(0,100)) +
scale_x_comma() +
labs(x=x_lab, y=y_lab,
title="Test plot",
subtitle="A plot that is only useful for demonstration purposes",
caption="Powered by Tom Bishop and OSIRIS") +
theme_ipsum_rc(grid="XY") +
theme(axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"))
}
graph = chart_cluster(flims)
graph = chart_cluster(films)
graph
library(ggThemeAssist)
??ggThemeAssist
ggThemeAssistGadget()
ggThemeAssistGadget(graph)
ggThemeAssistGadget(graph)
addinslist:::addinslistAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
graph = chart_cluster(films)
ggThemeAssist:::ggThemeAssistAddin()
graph
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
chart_cluster = function(df, axes = c("rating", "intl_revenue")) {
require(ggplot2)
require(hrbrthemes)
require(gcookbook)
x_lab = switch(axes[2], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
y_lab = switch(axes[1], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
ggplot(data = df, aes_string(y = axes[1], x = axes[2])) +
geom_point(size = 2.5) +
scale_y_continuous(limits = c(0,100))
# scale_x_comma() +
# labs(x=x_lab, y=y_lab,
#      title="Test plot",
#      subtitle="A plot that is only useful for demonstration purposes",
#      caption="Powered by Tom Bishop and OSIRIS") +
# theme_ipsum_rc(grid="XY") +
# theme(axis.line.x = element_line(color="black"),
#       axis.line.y = element_line(color="black"))
}
graph = chart_cluster(films)
ggThemeAssist:::ggThemeAssistAddin()
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page)==2) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
return(list(revenue, cost))
}
get_financials("test mfer")
mojo_page
length(mojo_page)==2
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
v = tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page)==2) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
return(list(revenue, cost))
}, error = function(e) {
return(list(NA,NA))
})
return(v)
}
get_financials("The big short")
get_financials("The big shortdsafa")
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
v = tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
#if (length(mojo_page)==2) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
return(list(revenue, cost))
}, error = function(e) {
return(list(NA,NA))
})
return(v)
}
get_financials("The big shortdsafa")
test = lapply(films$title, get_financials)
test
test[1]
test[[1]]
test[[1]][[1]]
test[[1]][1]
unlist(test)
data.frame(test)
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
v = tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
return(c(revenue, cost))
}, error = function(e) {
return(c(NA,NA))
})
return(v)
}
test = lapply(films$title, get_financials)
test
unlist(test)
test[1]
sapply(test, "[", 1)
require(parallel)
films = get_tomatoes("Emma stone")
films = get_tomatoes("Emma Stone")
films = get_tomatoes("Robert De Niro")
head(films)
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
v = tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
return(c(revenue, cost))
}, error = function(e) {
return(c(NA,NA))
})
return(v)
}
append_box_office = function(films){
require(parallel)
#+++++++++++++++++++++
# Begin Multi-Thread'n
#+++++++++++++++++++++
# Use most of the comp cores
no_cores = detectCores() - 1
# Initiate cluster
cl = makeCluster(no_cores)
test = parLapply(cl, films$title, get_financials)
stopCluster(cl)
#+++++++++++++++++++
# End Multi-Thread'n
#+++++++++++++++++++
films$intl_revenue = sapply(test, "[", 1)
films$prod_cost = sapply(test, "[", 2)
return(films)
}
films2 = append_box_office(films)
films2 = append_box_office(films)
require(parallel)
#+++++++++++++++++++++
# Begin Multi-Thread'n
#+++++++++++++++++++++
# Use most of the comp cores
no_cores = detectCores() - 1
# Initiate cluster
cl = makeCluster(no_cores)
test = parLapply(cl, films$title, get_financials)
stopCluster(cl)
no_cores = detectCores() - 2
cl = makeCluster(no_cores)
test = parLapply(cl, films$title, get_financials)
test
test = get_box_office(films)
test
test = append_box_office(films)
append_box_office = function(films){
require(parallel)
#+++++++++++++++++++++
# Begin Multi-Thread'n
#+++++++++++++++++++++
# Use most of the comp cores
no_cores = detectCores() - 2
# Initiate cluster
cl = makeCluster(no_cores)
test = parLapply(cl, films$title, get_financials)
stopCluster(cl)
#+++++++++++++++++++
# End Multi-Thread'n
#+++++++++++++++++++
films$intl_revenue = sapply(test, "[", 1)
films$prod_cost = sapply(test, "[", 2)
return(films)
}
test = append_box_office(films)
test = append_box_office(films)
nrow(test)
films = get_box_office('Brad Pitt')
films = get_tomatoes('Brad Pitt')
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
verbatimTextOutput("out"),
bookmarkButton()
)
}
server <- function(input, output, session) {
output$out <- renderText({
input$txt
})
}
shinyApp(ui, server, enableBookmarking = "url")
rm(list=ls())

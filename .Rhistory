str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
for (i in 1:nrow(films)) {
tryCatch(
{
film_title = films[i, "title"]
film_url = format_url(film_title)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
# Fill the vec with the vals
cash_money[i] = revenue
cost_money[i] = cost
}, error = function(e) {
cash_money[i] = NA
cost_money[i] = NA
})
}
films$intl_revenue = cash_money
films$prod_cost = as.integer(cost_money)
return(films %>% filter(intl_revenue > 0))
}
# Produce Graph -----------------------------------------------------------
chart_cluster = function(df, axes = c("rating", "intl_revenue")) {
require(ggplot2)
require(hrbrthemes)
require(gcookbook)
x_lab = switch(axes[2], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
y_lab = switch(axes[1], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
ggplot(data = df, aes_string(y = axes[1], x = axes[2])) +
geom_point(size = 2.5) +
scale_y_continuous(limits = c(0,100)) +
scale_x_comma() +
labs(x=x_lab, y=y_lab,
title="Test plot",
subtitle="A plot that is only useful for demonstration purposes",
caption="Powered by Tom Bishop and OSIRIS") +
theme_ipsum_rc(grid="XY") +
theme(axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"))
}
films = get_tomatoes("Brad Pitt")
films1 = get_box_office(films)
head(films1)
library(parallel)
detectCores()
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
return(list(revenue, cost))
}
get_financials("The Big Short")
get_financials("Saving Private Ryan")
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
return(list(revenue, cost))
}
get_financials("Saving Private Ryan")
get_financials("Saving Private Ryantom")
get_financials("this isnt a moview")
get_financials("50 shades of grey")
get_financials("fifty shades of grey")
film = "this isnt a movie"
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
mojo_page
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
revenue
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
rm(revenue)
rm(cost)
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
revenue
cost
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
cost_string
mojo_page
cost_string
error()
get_financials = function(film) {
require(assertthat)
require(dplyr)
require(rvest)
require(stringr)
# Box office mojo seems to have a specific URL structure, including:
# 1. Dropping a leading "The" for movies starting with the word
# 2. Removing all spaces (obviously)
# 3. Lower casing (obviously)
# 4. Removing all punctuation
# 5. Replacing ampersand with and
# 6. Removing trailing parenthetic movie descriptions
#   Note: There are many other idiosyncracies that I can't account for
#   for example try looking up the kids movie "Megamind".
#   What the fuck man
format_url = function(film) {
base = "http://www.boxofficemojo.com/movies/?id=%s.htm"
film =
str_replace(film, "(?i)^the ", "") %>%
tolower() %>%
str_replace_all(" ", "") %>%
str_replace_all("\\&", "and") %>%
str_replace_all("\\([a-z0-9]+\\)","") %>%
str_replace_all("[[:punct:]]", "")
url = sprintf(base, film)
return(url)
}
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page<=1)) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
return(list(revenue, cost))
}
get_financials("Saving private ryan")
get_financials("die hard")
get_financials("fifty shades of grey")
mojo_page
film = "Saving private ryan"
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
help("tryCatch")
simpleError()
simpleError('error')
help("stop")
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
mojo_page
length(mojo_page<=1)
if (length(mojo_page<=1)) {stop()}
if (length(mojo_page)<=1) {stop()}
rm(revenue)
rm(cost)
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page)<=1) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
revenue
rm(revenue)
rm(cost)
film = "thsiicmkx"
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page)<=1) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
revenue
cost
mojo_page
length(mojo_page)<=1
length(mojo_page)
tryCatch({
film_url = format_url(film)
# Look up bold elements on the mojo page
mojo_page =
film_url %>%
read_html() %>%
html_nodes("b") %>%
html_text()
# Raise an error if noting on page
if (length(mojo_page)==2) {stop()}
ind = grep("Worldwide:", mojo_page, ignore.case = TRUE)
revenue = as.integer(str_replace_all(mojo_page[ind + 1], "(\\$)|(,)",""))
# Cost line is unfortunately fixed
cost_string = mojo_page[9]
# Some handy formatting on the production cost!
# Thanks box office mojo!
if (cost_string == "N/A") {
cost = NA
} else {
# Reformat "million / thousand" string
magnitude = str_extract(cost_string, "(?i)million|thousand")
multipler = ifelse(magnitude == "million", 1000000, 1000)
cost = as.integer(str_replace_all(cost_string, "(\\$)|([a-z])","")) * multipler
}
}, error = function(e) {
revenue = NA
cost = NA
})
cost
revenue
mojo_page
length(mojo_page)==2
stop()
install.packages('addinslist')
addinslist:::addinslistAddin()
films
films =get_box_office(films)
head(films)
chart_cluster = function(df, axes = c("rating", "intl_revenue")) {
require(ggplot2)
require(hrbrthemes)
require(gcookbook)
x_lab = switch(axes[2], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
y_lab = switch(axes[1], "rating" = "Rotten Tomatoes Score"
, "intl_revenue" = "Box Office Revenue")
ggplot(data = df, aes_string(y = axes[1], x = axes[2])) +
geom_point(size = 2.5) +
scale_y_continuous(limits = c(0,100)) +
scale_x_comma() +
labs(x=x_lab, y=y_lab,
title="Test plot",
subtitle="A plot that is only useful for demonstration purposes",
caption="Powered by Tom Bishop and OSIRIS") +
theme_ipsum_rc(grid="XY") +
theme(axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"))
}
graph = chart_cluster(flims)
graph = chart_cluster(films)
graph
library(ggThemeAssist)
??ggThemeAssist
ggThemeAssistGadget()
ggThemeAssistGadget(graph)
ggThemeAssistGadget(graph)
addinslist:::addinslistAddin()

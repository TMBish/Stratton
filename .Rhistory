test[[5]]
test
runApp('App')
test[[1]]
test[1
]
test[2]
help(append)
test = list()
test[[1]] = "hello"
test
test[[1]]
runApp('App')
test
runApp('App')
test_list
rm(list=ls())
runApp('App')
runApp('App')
rm(list=ls())
runApp('App')
runApp('App')
runApp('App')
test
d
chart_cluster_h(test,"test",clstr=TRUE)
chart_cluster_h(test,"test")
runApp('App')
runApp('App')
test
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
sel_films = get_tomatoes("Brad Pitt")
sel_films_comp = append_box_office(sel_films)
df = sel_films_comp
clusters = 3
dimensions = c("rating", "intl_revenue")
train_matrix = df[,dimensions]
train_matrix = data.frame(lapply(train_matrix, scale))
kmean_model = kmeans(train_matrix, clusters)
df = filter(sel_films_comp, !is.na(intl_revenue))
train_matrix = df[,dimensions]
train_matrix = data.frame(lapply(train_matrix, scale))
kmean_model = kmeans(train_matrix, clusters)
kmean_model$centers
set.seed(123)
icons <- c("motorcycle", "taxi", "bus", "plane")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
n
icons
hciconarray(icons, n, icons = icons, size = 5)
hciconarray(icons, n, icons = icons, size = 5)
seq_along(3)
seq_along(kmean_model$centers)
seq_along(kmean_model$centers[1,])
seq_along(kmean_model$centers[,1])
help("hc_add_series")
runApp('App')
df
axes = c('rating','intl_revenue')
add_clus = df %>% inner_join(data_object$clusters$data, by = "title")
# Perform Clustering ------------------------------------------------------
cluster_df = function(df, clusters = 3, dimensions = c("rating", "intl_revenue")) {
train_matrix = df[,dimensions]
train_matrix = data.frame(lapply(train_matrix, scale))
kmean_model = kmeans(train_matrix, clusters)
output = list()
output$data = df %>%
mutate(cluster = factor(kmean_model$cluster)) %>%
select(title, cluster)
output$ceneters = kmean_model$centers
return(output)
}
clus = cluster_df(df)
add_clus = df %>% inner_join(data_object$clusters$data, by = "title")
add_clus = df %>% inner_join(clus, by = "title")
clus
add_clus = df %>% inner_join(clus$data, by = "title")
add_clus
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
base
# Perform Clustering ------------------------------------------------------
cluster_df = function(df, clusters = 3, dimensions = c("rating", "intl_revenue")) {
train_matrix = df[,dimensions]
train_matrix = data.frame(lapply(train_matrix, scale))
kmean_model = kmeans(train_matrix, clusters)
output = list()
output$data = df %>%
mutate(cluster = factor(kmean_model$cluster)) %>%
select(title, cluster)
output$centers = kmean_model$centers
return(output)
}
clus = cluster_df(df)
centroids = data_object$clusters$centers
centroids = clus$centers
centrois
centroids
for (i in 1:nrow(centroids)) {
test = base %>%
hc_add_series(data = list_parse2(centroids[i,]),
type = "scatter",
color = "black")
}
base
list_parse2(centroids[1,])
centroids[1,]
for (i in 1:nrow(centroids)) {
test = base %>%
hc_add_series(data = centroids[i,],
type = "scatter",
color = "black")
}
test
centroids[1.,]
class(centroids[1.,])
class(centroids)
as.data.frame(centroids)
# Perform Clustering ------------------------------------------------------
cluster_df = function(df, clusters = 3, dimensions = c("rating", "intl_revenue")) {
train_matrix = df[,dimensions]
train_matrix = data.frame(lapply(train_matrix, scale))
kmean_model = kmeans(train_matrix, clusters)
output = list()
output$data = df %>%
mutate(cluster = factor(kmean_model$cluster)) %>%
select(title, cluster)
output$centers = as.data.frame(kmean_model$centers)
return(output)
}
clus = cluster_df(df)
for (i in 1:nrow(centroids)) {
test = base %>%
hc_add_series(data = list_parse2(centroids[i,]),
type = "scatter",
color = "black")
}
centroids[i,]
centroids = data_object$clusters$centers
centroids = clus$centers
for (i in 1:nrow(centroids)) {
test = base %>%
hc_add_series(data = list_parse2(centroids[i,]),
type = "scatter",
color = "black")
}
test
list_parse2(centroids[i,])
train_matrix = df[,dimensions]
train_matrix = data.frame(lapply(train_matrix, scale))
head(train_matrix)
train_matrix[,1]
attr(train_matrix[,1])
train_matrix = df[,dimensions]
scale(train_matrix$rating)
lapply(train_matrix, scale)
t = lapply(train_matrix, scale)
t
attr(t)
t
t1 = lapply(train_matrix, scale)
attr(t1)
attr(t1$rating)
t1$rating
attr(t1,"scaled:center")
attr(t1,"center")
attr(t1,"scaled")
help("attr")
attr(t1,1)
attr(t1,"1")
t1
attr(t1$rating,"1")
attr(t1$rating,"scaled:center")
centers = c(attr(train_matrix[[dimensions[1]]],"scaled:center"),
attr(train_matrix[[dimensions[2]]],"scaled:center"))
centers
train_matrix = lapply(train_matrix, scale)
dimensions
centers = c(attr(train_matrix[[dimensions[1]]],"scaled:center"),
attr(train_matrix[[dimensions[2]]],"scaled:center"))
centers
train_matrix = df[,dimensions]
train_matrix = lapply(train_matrix, scale)
centers = c(attr(train_matrix[[dimensions[1]]],"scaled:center"),
attr(train_matrix[[dimensions[2]]],"scaled:center"))
scalers = c(attr(train_matrix[[dimensions[1]]],"scaled:scale"),
attr(train_matrix[[dimensions[2]]],"scaled:scale"))
kmean_model = kmeans(as.data.frame(train_matrix), clusters)
output = list()
output$data = df %>%
mutate(cluster = factor(kmean_model$cluster)) %>%
select(title, cluster)
test = kmean_model$centers
test
test[,dimensions[1]]
test[,dimensions[1]] * scalers[1] + centers[1]
centers = as.data.frame(kmean_model$centers)
# Need to unscale the centers for plotting
for (i in 1:2) {
centers[,i] = centers[,i] * scalers[i] + centers[i]
}
centers
centers = as.data.frame(kmean_model$centers)
centers
centers$rating * scalers[1] + centers[1]
(centers$rating * scalers[1]) + centers[1]
scalers
centers
test = as.data.frame(kmean_model$centers)
centers = c(attr(train_matrix[[dimensions[1]]],"scaled:center"),
attr(train_matrix[[dimensions[2]]],"scaled:center"))
cent = as.data.frame(kmean_model$centers)
# Need to unscale the centers for plotting
for (i in 1:2) {
cent[,i] = cent[,i] * scalers[i] + centers[i]
}
cent
clus
clus$centers = centroids
for (i in 1:nrow(centroids)) {
test = base %>%
hc_add_series(data = list_parse2(centroids[i,]),
type = "scatter",
color = "black")
}
test
centroids
for (i in 1:2) {
centroids[,i] = centroids[,i] * sd[i] + mu[i]
}
mu = c(attr(train_matrix[[dimensions[1]]],"scaled:center"), attr(train_matrix[[dimensions[2]]],"scaled:center"))
sd = c(attr(train_matrix[[dimensions[1]]],"scaled:scale"), attr(train_matrix[[dimensions[2]]],"scaled:scale"))
for (i in 1:2) {
centroids[,i] = centroids[,i] * sd[i] + mu[i]
}
centroids
for (i in 1:nrow(centroids)) {
test = base %>%
hc_add_series(data = list_parse2(centroids[i,]),
type = "scatter",
color = "black")
}
test
centroids[1,]
base
rev(centroids[1,])
for (i in 1:nrow(centroids)) {
test = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
color = "black")
}
test
nrow(centroids)
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
color = "black")
}
base
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
symbol = "diamond",
color = "black")
}
base
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
help("hc_add_series")
data("favorite_bars")
favorite_bars
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = fa_icon_mark("car")),
icon = fa_icon("car"),
color = "black")
}
base
fa_icon_mark()
fa_icon_mark(iconname = "cross")
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = fa_icon_mark("crosshairs")),
icon = fa_icon("crosshairs"),
color = "black")
}
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = fa_icon_mark("circle")),
color = "black")
}
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = fa_icon_mark("grav")),
color = "black")
}
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = fa_icon_mark("grav")),
color = "black")
}
fa_icon_mark("grav")
library(MASS)
Mlibrary(MASS)
dscars <- round(mvrnorm(n = 20, mu = c(1, 1), Sigma = matrix(c(1,0,0,1),2)), 2)
dsplan <- round(mvrnorm(n = 10, mu = c(3, 4), Sigma = matrix(c(2,.5,2,2),2)), 2)
dstrck <- round(mvrnorm(n = 15, mu = c(5, 1), Sigma = matrix(c(1,.5,.5,1),2)), 2)
highchart() %>%
hc_chart(type = "scatter", zoomType = "xy") %>%
hc_tooltip(
useHTML = TRUE,
pointFormat = paste0("<span style=\"color:{series.color};\">{series.options.icon}</span>",
"{series.name}: <b>[{point.x}, {point.y}]</b><br/>")
) %>%
hc_add_series(data = list_parse2(as.data.frame(dscars)),
marker = list(symbol = fa_icon_mark("car")),
icon = fa_icon("car"), name = "car") %>%
hc_add_series(data = list_parse2(as.data.frame(dsplan)),
marker = list(symbol = fa_icon_mark("plane")),
icon = fa_icon("plane"), name = "plane") %>%
hc_add_series(data = list_parse2(as.data.frame(dstrck)),
marker = list(symbol = fa_icon_mark("truck")),
icon = fa_icon("truck"), name = "truck")
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross"),
color = "black")
}
base
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross"),
size = 15,
color = "black")
}
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", size = 15),
color = "black")
}
bae
base
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", size = 15),
color = "black")
}
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", width = 15),
color = "black")
}
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 8),
color = "black")
}
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 10),
color = "black")
}
base
library(viridisLite)
viridisLite::viridis(5)
viridisLite::viridis()1
viridisLite::viridis(10)1
viridisLite::viridis()[1]
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 10),
color = viridis(n=10)[i])
}
base
viridis(n=10)[1]
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 10),
color = viridis(n=10)[i])
}
base
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 10),
color = "red")
}
base
help("colorize")
colorize(LETTERS[rbinom(20, 5, 0.5)], c("#FF0000", "#00FFFF"))
colorize(runif(10))
colorize(1)
colorize(2)
colorize(3)
colorize(c(1,2))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 10),
color = colorize(nrow(centroids))[i])
}
base
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 10),
color = colorize(nrow(centroids))[i])
}
bae
base
base = hchart(add_clus, "scatter", hcaes_string(x = axes[2], y = axes[1], color = 'cluster'))
for (i in 1:nrow(centroids)) {
base = base %>%
hc_add_series(name = "cluster Center",
data = list_parse2(rev(centroids[i,])),
type = "scatter",
marker = list(symbol = "cross", radius = 10),
color = colorize(1:nrow(centroids))[i])
}
base
centroids
runApp('App')
df
cluster_df(df)
df
cluster_df(df)
train_matrix = df[,dimensions]
train_matrix = lapply(train_matrix, scale)
mu = c(attr(train_matrix[[dimensions[1]]],"scaled:center"), attr(train_matrix[[dimensions[2]]],"scaled:center"))
sd = c(attr(train_matrix[[dimensions[1]]],"scaled:scale"), attr(train_matrix[[dimensions[2]]],"scaled:scale"))
kmean_model = kmeans(as.data.frame(train_matrix), clusters)
output = list()
output$data = df %>%
mutate(cluster = factor(kmean_model$cluster))
output$data
df %>%
mutate(cluster = factor(kmean_model$cluster)) %>%
select(title, cluster)
df %>%
mutate(cluster = factor(kmean_model$cluster))
rm(list=ls())
